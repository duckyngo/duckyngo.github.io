{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-8588eb082f97287f2b26.js","mappings":"gPAQMA,EAAyCC,EAAAA,MAAW,YAAe,IAAZC,EAAW,EAAXA,KACnDC,GAAeC,EAAAA,EAAAA,aAsBrB,OApBAC,EAAAA,EAAAA,kBAAgB,WACZ,IAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACfC,IAbA,gCAcAR,KAAAA,EACA,aAAc,WACdS,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGXC,OAAOC,QAAQP,GAAYQ,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACjDb,EAAWc,aAAaF,EAAKC,MAGjChB,EAAakB,QAAQC,YAAYhB,KAClC,CAACJ,IAEG,uBAAKqB,IAAKpB,OAGrBH,EAAWwB,YAAc,aAEzB,QCAMC,EADK,CAAC,OAAD,oBACOC,KAAI,SAACC,GAAD,iCAAkCA,EAAlC,IAAuCA,EAAvC,UAsCtB,EApCa,SAAC,GAAD,IAAWC,EAAX,EAAGC,KAAQD,KAAX,OACX,QAAC,IAAD,MACE,QAAC,IAAD,CACEE,MAAOF,EAAKE,MACZC,YAAaH,EAAKG,YAAcH,EAAKG,YAAcH,EAAKI,QACxDC,MAAOL,EAAKM,OAASN,EAAKM,OAAOC,gBAAgBC,OAAO1B,SAAM2B,EAC9DC,SAAUV,EAAKW,KACfC,aAAcZ,EAAKY,gBAErB,QAAC,KAAD,CAASC,GAAG,KAAKC,QAAQ,aACtBd,EAAKE,QAER,aAAGa,GAAI,CAAEC,MAAM,YAAcC,GAAI,EAAGC,EAAG,CAAEF,MAAM,aAAgBG,SAAU,CAAC,EAAG,EAAG,MAC9E,oBAAOnB,EAAKoB,MACXpB,EAAKqB,OACJ,QAAC,WAAD,YAEE,QAAC,IAAD,CAAUA,KAAMrB,EAAKqB,QAGxBrB,EAAKsB,YAAL,MACAtB,EAAKsB,aAAc,oBAAOtB,EAAKsB,WAAZ,eAEtB,mBACEP,GAAI,CACFQ,GAAI,EACJ,6BAA8B,CAAEA,GAAI,CAAC,EAAG,EAAG,GAAIC,UAAW3B,EAAO4B,KAAP,OAC1DX,QAAQ,oBAGV,QAAC,EAAAY,YAAD,KAAc1B,EAAK2B,QAErB,QAAC,EAAD,CAAYrD,KAAK,wBCnErB,MCQe,YAAmD,IAAjBsD,EAAgB,oBAC/D,OAAO,gBAAC,EAASA,K,gFCkBnB,IAjBiB,SAAC,GAAyB,IAAvBP,EAAsB,EAAtBA,KAClB,GAA+BQ,EAAAA,EAAAA,KAAvBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAElB,OACE,gBAAC,WAAD,KACGV,EAAKvB,KAAI,SAACkC,EAAKC,GAAN,OACR,gBAAC,WAAD,CAAgB3C,IAAK0C,EAAIrB,QACpBsB,GAAF,KACD,gBAAC,KAAD,CAAOpB,GAAIqB,EAAAA,KAAMC,IAAIC,EAAAA,EAAAA,GAAe,IAAIL,EAAL,IAAiBD,EAAjB,IAA6BE,EAAIrB,OACjEqB,EAAIK","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/utterance.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/post-query.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/components/item-tags.tsx"],"sourcesContent":["import React, { createRef, useLayoutEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\n\nexport interface IUtterancesProps {\n    repo: string;\n}\n\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo }) => {\n    const containerRef = createRef<HTMLDivElement>();\n\n    useLayoutEffect(() => {\n        const utterances = document.createElement('script');\n\n        const attributes = {\n            src,\n            repo,\n            'issue-term': 'pathname',\n            label: 'comment',\n            theme: 'github-light',\n            crossOrigin: 'anonymous',\n            async: 'true',\n        };\n\n        Object.entries(attributes).forEach(([key, value]) => {\n            utterances.setAttribute(key, value);\n        });\n\n        containerRef.current.appendChild(utterances);\n    }, [repo]);\n\n    return <div ref={containerRef} />;\n});\n\nUtterances.displayName = 'Utterances';\n\nexport default Utterances;","/** @jsx jsx */\nimport * as React from \"react\"\nimport { jsx, Heading } from \"theme-ui\"\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\nimport Layout from \"./layout\"\nimport ItemTags from \"./item-tags\"\nimport Seo from \"./seo\"\nimport Utterances from \"./utterance\"\n\ntype PostProps = {\n  data: {\n    post: {\n      slug: string\n      title: string\n      date: string\n      tags?: {\n        name: string\n        slug: string\n      }[]\n      description?: string\n      canonicalUrl?: string\n      body: string\n      excerpt: string\n      timeToRead?: number\n      banner?: {\n        childImageSharp: {\n          resize: {\n            src: string\n          }\n        }\n      }\n    }\n  }\n}\n\nconst px = [`32px`, `16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.15) 0px ${v} ${v} 0px`)\n\nconst Post = ({ data: { post } }: PostProps) => (\n  <Layout>\n    <Seo\n      title={post.title}\n      description={post.description ? post.description : post.excerpt}\n      image={post.banner ? post.banner.childImageSharp.resize.src : undefined}\n      pathname={post.slug}\n      canonicalUrl={post.canonicalUrl}\n    />\n    <Heading as=\"h1\" variant=\"styles.h1\">\n      {post.title}\n    </Heading>\n    <p sx={{ color: `secondary`, mt: 3, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n      {post.timeToRead && ` — `}\n      {post.timeToRead && <span>{post.timeToRead} min read</span>}\n    </p>\n    <section\n      sx={{\n        my: 5,\n        \".gatsby-resp-image-wrapper\": { my: [4, 4, 5], boxShadow: shadow.join(`, `) },\n        variant: `layout.content`,\n      }}\n    >\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </section>\n    <Utterances repo=\"duckyngo/comments\" />\n  </Layout>\n)\n\nexport default Post","import { graphql } from \"gatsby\"\nimport PostComponent from \"../components/post\"\n\nexport default PostComponent\n\nexport const query = graphql`\n  query ($slug: String!, $formatString: String!) {\n    post(slug: { eq: $slug }) {\n      slug\n      title\n      date(formatString: $formatString)\n      tags {\n        name\n        slug\n      }\n      description\n      canonicalUrl\n      body\n      excerpt\n      timeToRead\n      banner {\n        childImageSharp {\n          resize(width: 1200, quality: 90) {\n            src\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Post from \"../../../components/post\"\n\ntype Props = {\n  data: {\n    post: any\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCorePost({ ...props }: Props) {\n  return <Post {...props} />\n}\n","import * as React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"names":["Utterances","React","repo","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","theme","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","shadow","map","v","post","data","title","description","excerpt","image","banner","childImageSharp","resize","undefined","pathname","slug","canonicalUrl","as","variant","sx","color","mt","a","fontSize","date","tags","timeToRead","my","boxShadow","join","MDXRenderer","body","props","useMinimalBlogConfig","tagsPath","basePath","tag","i","Link","to","replaceSlashes","name"],"sourceRoot":""}