{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/note-on-android-mvvm",
    "result": {"data":{"post":{"slug":"/note-on-android-mvvm","title":"Notes on Android MVVM","date":"28.02.2022","tags":[{"name":"Android","slug":"android"},{"name":"Mobile","slug":"mobile"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"note-on-android-mvvm\",\n  \"title\": \"Notes on Android MVVM\",\n  \"date\": \"2022-02-28T00:00:00.000Z\",\n  \"tags\": [\"Android\", \"Mobile\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"View Layer\"), mdx(\"p\", null, \"Bind observable variables and action by View Model. The relationship between View Model and View is 1-many\\nwhich means that many Views can be associated with 1 View Model.\"), mdx(\"p\", null, \"In View layer, We handle 3 steps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Initialize ViewModel with or without factory\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"    // Initialize ViewModel without factory\\n    final ProductListViewModel viewModel = new ViewModelProvider(this).get(ProductListViewModel.class);\\n    // Initialize ViewModel with factory\\n    final ProductViewModel model = new ViewModelProvider(this, factory).get(ProductViewModel.class);\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Call ViewMode directly from View to send user Event if user input:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"        mBinding.productsSearchBtn.setOnClickListener(v -> {\\n            Editable query = mBinding.productsSearchBox.getText();\\n            viewModel.setQuery(query);\\n        });\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Subscribe UI, we can observe the Model by:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"        // Update the list of products when the underlying data changes.\\n        viewModel.getProducts().observe(this, new Observer<List<ProductEntity>>() {\\n            @Override\\n            public void onChanged(@Nullable List<ProductEntity> myProducts) {\\n                if (myProducts != null) {\\n                    mBinding.setIsLoading(false);\\n                    mProductAdapter.setProductList(myProducts);\\n                } else {\\n                    mBinding.setIsLoading(true);\\n                }\\n            }\\n        });\\n\")), mdx(\"h3\", null, \"ViewModel Layer\"), mdx(\"p\", null, \"ViewModel contains Models and prepare the observable data for the View. It's middle man to interact between View and Model.\\nOne thing to keep in mind is that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ViewModel will not bind to the View\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ViewModel object extend AndroidViewModel object.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Get \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"DataRepository\"), \" from Dependencies Injection (DI) or from Application class\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expose data using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LiveData\"), \" to View Layer\")), mdx(\"h4\", null, \"We can inject dependencies into ViewModels from View by using Factory\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"        //  By this way, we can pass product ID into ViewModel\\n        public static class Factory extends ViewModelProvider.NewInstanceFactory {\\n\\n                @NonNull\\n                private final Application mApplication;\\n\\n                private final int mProductId;\\n\\n                private final DataRepository mRepository;\\n\\n                public Factory(@NonNull Application application, int productId) {\\n                    mApplication = application;\\n                    mProductId = productId;\\n                    mRepository = ((BasicApp) application).getRepository();\\n                }\\n\\n                @SuppressWarnings(\\\"unchecked\\\")\\n                @Override\\n                @NonNull\\n                public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\\n                    return (T) new ProductViewModel(mApplication, mRepository, mProductId);\\n                }\\n            }\\n\")), mdx(\"h3\", null, \"Model & Repository\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Act the same with MVP except they can return \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LiveData\"), \" instead of raw Object.\")), mdx(\"h3\", null, \"Reference:\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/android/architecture-components-samples/tree/master/BasicSample\"\n  }, \"Android Architecture Components Basic\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"View Layer Bind observable variables and action by View Model. The relationship between View Model and View is 1-many\nwhich means that manyâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/note-on-android-mvvm","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}