{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/ios-computed-property-and-observed-property",
    "result": {"data":{"post":{"slug":"/ios-computed-property-and-observed-property","title":"Advanced Swift: Computed Properties and  Observed Properties","date":"05.04.2022","tags":[{"name":"iOS","slug":"i-os"},{"name":"Mobile","slug":"mobile"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"ios-computed-property-and-observed-property\",\n  \"title\": \"Advanced Swift: Computed Properties and  Observed Properties\",\n  \"date\": \"2022-04-05T00:00:00.000Z\",\n  \"tags\": [\"iOS\", \"Mobile\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Computed Properties\"), mdx(\"p\", null, \"When we want to calculate the value of property base on other properties. The value of this property will auto update when other properties updated\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-swift\"\n  }, \"let basicSalary = 1000\\nvar monthyAllowance = 300\\nvar totalSalary: Int {\\n        get {\\n                return basicSalary + monthyAllowance\\n        }\\n}\\n\\n\")), mdx(\"h3\", null, \"Observed Properties\"), mdx(\"p\", null, \"When we don\\u2019t need to calculate the value of property but just monitor when the value is change\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-swift\"\n  }, \"let totalSalary: Int = 1000 {\\n    // Right before the property get change => willSet function will trigger\\n    willSet{\\n        print(newValue)   // newValue: The value will be set to\\n    }\\n    // Right after the property get change => didSet function will trigger\\n    didSet{\\n        // We can check whether property value is valid or not\\n        print(oldValue)     // oldValue: The value that this property used to be\\n        if totalSalary <= MIN_SALARY:\\n            totalSalary = MIN_SALARY\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Computed Properties When we want to calculate the value of property base on other properties. The value of this property will auto updateâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/ios-computed-property-and-observed-property","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}