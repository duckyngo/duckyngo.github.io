{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/note-on-kotlin-coroutines-live-data",
    "result": {"data":{"post":{"slug":"/note-on-kotlin-coroutines-live-data","title":"Notes on Kotlin Coroutines with Live Data in Android","date":"03.03.2022","tags":[{"name":"Android","slug":"android"},{"name":"Mobile","slug":"mobile"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"note-on-kotlin-coroutines-live-data\",\n  \"title\": \"Notes on Kotlin Coroutines with Live Data in Android\",\n  \"date\": \"2022-03-03T00:00:00.000Z\",\n  \"tags\": [\"Android\", \"Mobile\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// The DataSource is just an interface which define which function\\ninterface DataSource {\\n    fun getCurrentTime(): LiveData<Long>\\n    fun fetchWeather(): LiveData<String>\\n    val cachedData: LiveData<String>\\n    suspend fun fetchNewData()\\n}\\n\\n// DefaultDataSource is the default implementation of DataSource\\n\")), mdx(\"p\", null, \"CoroutineLiveData: Allow controlling a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LiveData\"), \" from a coroutine block.\"), mdx(\"h3\", null, \"LiveData builder that emits values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    // When observed, it generates a new value every second.\\n    fun getCurrentTime(): LiveData<Long> =\\n        liveData {\\n            while (true) {\\n                emit(System.currentTimeMillis())\\n                delay(1000)\\n            }\\n        }\\n\")), mdx(\"h3\", null, \"Transformation\"), mdx(\"p\", null, \"Transformation, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"switchMap\"), \" are running in the UI thread.\\nHowever, Combining of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"switchMap\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"liveData\"), \" builder can help us \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"call suspend functions or move the transformation to different thread.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"val currentTimeTransformed = currentTime.switchMap {\\n  liveData(defaultDispatcher) { emit(timeStampToTime(it)) }\\n}\\n\")), mdx(\"h3\", null, \"Using emit and emitSource\"), mdx(\"p\", null, \"We can update one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"liveData\"), \" from another LiveData using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emitSource\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"    val currentWeather: Live<String> = liveData{\\n      emit(\\\"Loading...\\\")\\n      emitSource(dataSource.fetchWeather())       // this will emit value from other source\\n    }\\n\")), mdx(\"h3\", null, \"Reference\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/android/architecture-components-samples/tree/master/LiveDataSample\"\n  }, \"Kotlin Coroutines with Architecture Component Live Data ViewMOdel Lifecycle\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"CoroutineLiveData: Allow controlling a  LiveData  from a coroutine block. LiveData builder that emits values: Transformation Transformationâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/note-on-kotlin-coroutines-live-data","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}