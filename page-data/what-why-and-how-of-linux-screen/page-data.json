{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/what-why-and-how-of-linux-screen",
    "result": {"data":{"post":{"slug":"/what-why-and-how-of-linux-screen","title":"What, Why and How of Linux Screen","date":"28.03.2022","tags":[{"name":"Linux","slug":"linux"},{"name":"Tools","slug":"tools"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"what-why-and-how-of-linux-screen\",\n  \"title\": \"What, Why and How of Linux Screen\",\n  \"date\": \"2022-03-28T00:00:00.000Z\",\n  \"tags\": [\"Linux\", \"Tools\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What is screen?\"), mdx(\"p\", null, \"Screen is a terminal multiplexer which helps you to start a screen session and open any number of windows inside the session.\"), mdx(\"h2\", null, \"Why do we need screen?\"), mdx(\"p\", null, \"Sometimes, when we perform a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"long-running task on a remote machine\"), \" and suddenly the connection lost or your client machine have problem, the SSH session will be terminated and all of your work is GONE. \"), mdx(\"p\", null, \"It happend many times especially in training a Machine Learning/ Deep Learning models because sessions are dependent on your client machine. Fortunately, we can eliminate the problem by using a utility called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"screen\")), mdx(\"h2\", null, \"How to use screen?\"), mdx(\"h4\", null, \"1. Install screen for Ubuntu\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo apt-get install screen\")), mdx(\"h4\", null, \"2. Run Screen for the first time\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen\")), mdx(\"p\", null, \"Now, you can run a long-running task like training a Deep Learning models, download very heavy files without worrying about the connection lost . \"), mdx(\"p\", null, \"To detach an attached screen :\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -d\")), mdx(\"p\", null, \"Press \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CTR-A\"), \" then press \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"d\"), \" to detach but preserve the screen, you can re-attach later.\"), mdx(\"h4\", null, \"3. Re-attach the Terminal session\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -r\"), \"\\nThis command will re-attach to your current running session if you just have 1 screen session.\\nIn case of you have more than 1 screen session, you can use the command below to see all sessions:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -ls\")), mdx(\"p\", null, \"The results will be like:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(base) medic01@u20:/data1/kynd$ screen -ls\\nThere is a screen on:\\n        3350892.pts-9.u20       (2022\\uB144 03\\uC6D4 28\\uC77C 20\\uC2DC 42\\uBD84 19\\uCD08)       (Attached)\\n1 Socket in /run/screen/S-medic01.\\n\")), mdx(\"p\", null, \"Now you can get the screen id and re-attach by that id by typing:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -r your_screen_id \")), mdx(\"h4\", null, \"4. To create screen session with a name\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -S session_name   # Note: use a capital S\")), mdx(\"p\", null, \"You will see  your session with name like below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(base) medic01@u20:/data1/kynd$ screen -ls\\nThere are screens on:\\n        3351224.session_name    (2022\\uB144 03\\uC6D4 28\\uC77C 20\\uC2DC 46\\uBD84 01\\uCD08)       (Attached)\\n        3350892.pts-9.u20       (2022\\uB144 03\\uC6D4 28\\uC77C 20\\uC2DC 42\\uBD84 19\\uCD08)       (Attached)\\n2 Sockets in /run/screen/S-medic01.\\n\")), mdx(\"p\", null, \"Re-attach to your screen session by:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"screen -r session_name\")), mdx(\"h4\", null, \"5. Exit from screen\"), mdx(\"p\", null, \"To exit from screen, simply type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exit\"), \" in your screen session. It will terminate your current screen session and back to normal ssh session\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"What is screen? Screen is a terminal multiplexer which helps you to start a screen session and open any number of windows inside the sessionâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/what-why-and-how-of-linux-screen","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}