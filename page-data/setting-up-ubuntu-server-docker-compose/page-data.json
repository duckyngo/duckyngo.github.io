{
    "componentChunkName": "component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx",
    "path": "/setting-up-ubuntu-server-docker-compose",
    "result": {"data":{"post":{"slug":"/setting-up-ubuntu-server-docker-compose","title":"Technical Notes: Setting Up an Ubuntu Server for Docker Compose","date":"02.08.2024","tags":[{"name":"AI","slug":"ai"},{"name":"MLOps","slug":"ml-ops"},{"name":"Linux","slug":"linux"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"setting-up-ubuntu-server-docker-compose\",\n  \"title\": \"Technical Notes: Setting Up an Ubuntu Server for Docker Compose\",\n  \"date\": \"2024-08-02T00:00:00.000Z\",\n  \"tags\": [\"AI\", \"MLOps\", \"Linux\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null), mdx(\"p\", null, \"In this technical notes, I'll walk through the process of setting up an Ubuntu server to host Docker Compose services. This setup includes installing Docker, configuring the NVIDIA Container Toolkit (if required for GPU-based workloads), and running a sample service with Docker Compose.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Prerequisites\"), mdx(\"p\", null, \"Before start, ensure you have the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A fresh Ubuntu server with SSH access.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Administrative (root) privileges on the server.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 1: Update and Upgrade the System\"), mdx(\"p\", null, \"First, connect to your server via SSH and update the package list. It's always a good practice to ensure your system is up-to-date.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo apt update\\nsudo apt upgrade -y\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 2: Install Docker\"), mdx(\"p\", null, \"Docker is a platform that allows you to build, ship, and run applications in lightweight containers. To install Docker, use the official installation script:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl -fsSL https://get.docker.com -o get-docker.sh\\nsudo sh get-docker.sh\\n\")), mdx(\"p\", null, \"After installation, add your user to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker\"), \" group so you can run Docker commands without \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sudo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo usermod -aG docker $USER\\n\")), mdx(\"p\", null, \"Apply the group changes by logging out and logging back in, or use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"su - $USER\\n\")), mdx(\"p\", null, \"Verify the Docker installation:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker --version\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 3: Install NVIDIA Container Toolkit (Optional for GPU Workloads)\"), mdx(\"p\", null, \"If your service requires GPU acceleration, install the NVIDIA Container Toolkit.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configure the repository:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\\\\n  && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\\\\\n    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\\\\n    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update the package list and install the toolkit:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo apt-get update\\nsudo apt-get install -y nvidia-container-toolkit\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"nvidia-docker2\"), \":\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo apt-get install -y nvidia-docker2\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Restart the Docker service:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo systemctl restart docker\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 4: Install Docker Compose\"), mdx(\"p\", null, \"Docker Compose simplifies the process of defining and running multi-container Docker applications. Install it as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo curl -L \\\"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose\\n\")), mdx(\"p\", null, \"Make the binary executable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"sudo chmod +x /usr/local/bin/docker-compose\\n\")), mdx(\"p\", null, \"Verify the installation:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker-compose --version\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 5: Build Docker Images\"), mdx(\"p\", null, \"Navigate to the directory containing your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" file. This file defines the services for your application. Build the Docker images:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"cd /path/to/your/project\\ndocker-compose build\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 6: Run Your Docker Containers\"), mdx(\"p\", null, \"Start your service with Docker Compose:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker-compose up -d\\n\")), mdx(\"p\", null, \"Check the running containers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker-compose ps\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"We now have a fully functional Ubuntu server configured to run Docker Compose services. With this setup, you can deploy microservices, web applications, and other containerized workloads efficiently. If our application requires GPU acceleration, the NVIDIA Container Toolkit ensures seamless integration.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"In this technical notes, I'll walk through the process of setting up an Ubuntu server to host Docker Compose services. This setup includesâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/setting-up-ubuntu-server-docker-compose","formatString":"DD.MM.YYYY"}},
    "staticQueryHashes": ["2744905544","3090400250","318001574"]}